# -*- coding: utf-8 -*-

"""
  Â©
  Author: Karim Makki
"""

import visvis as vv
import trimesh
import numpy as np
import os
import argparse
from scipy.ndimage.filters import gaussian_filter
import  skfmm
import nibabel as nib
from skimage import measure

import fast_Gaussian_curvature_3D as g3D
from Gauss_curv_4_Freesurfer_output import *
from Weingarten_map import *


# #### Compute the Hessian determinant using the rule of Sarrus
#
# def hessian_determinant(h):
#
#     tmp1 = h[0,0,...]* h[1,1,...]*h[2,2,...] + h[0,1,...]* h[1,2,...]*h[2,0,...] +h[0,2,...]* h[1,0,...]*h[2,1,...]
#     tmp2 = h[0,1,...]* h[1,0,...]*h[2,2,...] + h[0,0,...]* h[1,2,...]*h[2,1,...] +h[0,2,...]* h[1,1,...]*h[2,0,...]
#
#     return tmp1 - tmp2


if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument('-in', '--mask', help='3D binary mask, as NIFTI file', type=str, required = True)
    parser.add_argument('-m', '--mesh', help='surface mesh generated by FreeSurfer, which corresponds to the mask nifti file, \
    as GIFTI file', type=str, required = True)
    parser.add_argument('-o', '--output', help='output directory', type=str, default = './mesh_eigen_results')

    args = parser.parse_args()


    ## Example of use: python3 Weingarten_map_4_Freesurfer_output.py -in ./3D_data/Freesurfer_output/lh_white.nii.gz
    ## -m ./3D_data/Freesurfer_output/lh.white.gii -o ./eigen_Freesurfer


    output_path = args.output

    if not os.path.exists(output_path):
        os.makedirs(output_path)

    nii = nib.load(args.mask)


    shape = nii.get_data()

    shape, dx, dy, dz = g3D.bbox_3D(shape,7)
    phi = g3D.phi(shape) ## signed geodesic distance

    gaussian_filter(phi, sigma=2, output=phi) ## the smoothing kernel should be the same everywhere

    #verts, faces, normals, values = measure.marching_cubes_lewiner(phi, 0.0)#, spacing=(dx,dy,dz), gradient_direction='descent')

    Hessian = g3D.hessian(phi)[1]

    Hessian_determinant = hessian_determinant(Hessian)

    mesh = load_mesh(args.mesh)
    ## Express vertex coordinates in the image coordinate system
    verts = map_coordinates(mesh.vertices,np.linalg.inv(nii.affine))

    verts = g3D.align_origin(verts,dx,dy,dz) ### Align origin with the origin of the bounding box


    det = g3D.texture_spline_interpolation3D(verts, Hessian_determinant)

    ### Compute sorted eigenvalues of the Hessian matrix ###############

    Hessian = np.einsum('lmijk->ijklm', Hessian)
    eigenValues = np.linalg.eigvals(Hessian) ## To compute only eigenvalues

    #eigenValues, eigenVectors = np.linalg.eig(Hessian) # To compute both eigenvalues and eigenvectors
    eigenValues = np.sort(eigenValues)

    ####################################################################

    #lamda1 = g3D.texture_nearest_neigh_interpolation3D(verts, eig_vals_sorted[...,0])
    lamda1 = g3D.texture_spline_interpolation3D(verts, eigenValues[...,0])
    lamda2 = g3D.texture_spline_interpolation3D(verts, eigenValues[...,1])
    lamda3 = g3D.texture_spline_interpolation3D(verts, eigenValues[...,2])

    erts = g3D.align_origin_back(verts,dx,dy,dz) ### Re-align origin "back" with the origin of the original image

    #verts = g3D.align_origin(verts,dx,dy,dz) ### re-align origin

    m = trimesh.Trimesh(vertices=verts, faces=mesh.faces)

    m.export(os.path.join(output_path, "surface_mesh.obj"))


    g3D.display_mesh(verts, mesh.faces, mesh.vertex_normals, lamda1, os.path.join(output_path, "lambda1.png"))
    g3D.display_mesh(verts, mesh.faces, mesh.vertex_normals, lamda2, os.path.join(output_path, "lambda2.png"))
    g3D.display_mesh(verts, mesh.faces, mesh.vertex_normals, lamda3, os.path.join(output_path, "lambda3.png"))

    g3D.display_mesh(verts, mesh.faces, mesh.vertex_normals, 0.5*(lamda1+lamda2+lamda3), os.path.join(output_path, "mean_curvature1.png"))
    g3D.display_mesh(verts, mesh.faces, mesh.vertex_normals, lamda1+lamda2+lamda3, os.path.join(output_path, "extrinsic_Laplacian.png"))
    g3D.display_mesh(verts, mesh.faces, mesh.vertex_normals, det, os.path.join(output_path, "Hessian_determinant_Sarrus.png"))
